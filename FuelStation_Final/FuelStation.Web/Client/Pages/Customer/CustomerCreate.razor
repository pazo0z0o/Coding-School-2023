@page "/customerlist/add"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@using FuelStation.Web.Shared.ManagerStaffSharedDTOs;
@using FuelStation.Web.Shared.Services_Logic;
@using System.Net;


 
<h3>Add new Customer</h3>
<EditForm Model="Customer" OnValidSubmit="OnCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-6">
        <input type="hidden" class="form-control" id="code" @bind="Customer.ID" />
    </div>
    <div class="col-md-6">
        <label class="form-label">Name</label>
        <InputText class="form-control" id="name" @bind-Value="Customer.Name" />
        <ValidationMessage For="@(() => Customer.Name)" />
    </div>
    <div class="col-md-6">
        <label class="form-label">Surname</label>
        <InputText class="form-control" id="surname" @bind-Value="Customer.Surname" />
        <ValidationMessage For="@(() => Customer.Surname)" />
    </div>
    <div class="col-md-6">
        <label class="form-label">Card Number</label>
        <input class="form-control" id="price" @bind="Customer.CardNumber" />
        @*<ValidationMessage For="@(() => Customer.Phone)" />*@
    </div>

    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" type="submit">Add new Customer</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
            <button class="btn btn-warning" @onclick="CardNumberGen">Generate Number </button>
            <button class="btn btn-info" @onclick="OnBack"> Back </button>
        </div>
    </div>
</EditForm>

@code {
    CustomerCreateDTO Customer { get; set; } = new();
    RandomGenerators randCard { get; set; } = new();
    bool isLoading = true;

    private void OnCancel()
    {
        navigationManager.NavigateTo("customerlist");
    }
    private async Task OnCreate()
    {
        HttpResponseMessage? response;
        response = await httpClient.PostAsJsonAsync("customer", Customer);
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("customerlist");
    }
private void OnBack() { navigationManager.NavigateTo("landingpage"); }
    //not elegant -- but works
    private async Task<string> CardNumberGen()
    {   try{
            string value = await randCard.CardNumberGeneratorAsync();
            Customer.CardNumber = value;
        }
        catch (HttpRequestException ex)
        {
           if (ex.StatusCode == HttpStatusCode.BadRequest)
            {
            Console.WriteLine($"Error: {ex.Message}"); //works but throws bad request anyway
            }
        
        }
        
     return  Customer.CardNumber;
    }


}

