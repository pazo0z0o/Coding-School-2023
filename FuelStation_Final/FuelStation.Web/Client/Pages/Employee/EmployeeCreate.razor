@page "/employeelist/create/{Id:int?}"
@using FuelStation.Model.Enums;
@using FuelStation.Web.Shared.ManagerOnlyDTOs;
@using FuelStation.Model;
@using FuelStation.Web.Shared;
@using System.Net.Http.Json;
@using FuelStation.Web.Shared.Services_Logic;
@using System.Net;
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<h3> Edit Employee</h3>

@if (Employee == null)
{
    <p>Loading ...</p>
}
else
{
       <button class="btn btn-warning" @onclick="OnBack"> Back </button>
    <div class="row mt-2">
        <div class="col-md-6">
            <label class="form-label">Name</label>
            <input class="form-control" @bind="@Employee.Name" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <label class="form-label">Surname</label>
            <input class="form-control" @bind="@Employee.Surname" />
        </div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Hire Date Start</label>
        <input type="date" class="form-control" @bind="@Employee.HireDateStart" @oninput=" ValidHireDate" />
    </div>
    <div class="col-md-6">
        <label class="form-label">Hire Date End</label>
        <input type="date" class="form-control" @bind="@Employee.HireDateEnd" @oninput="ValidFiredDate" />
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <label class="form-label">Employee Type</label>
            <select class="form-control" @bind="@Employee.EmployeeType">
                @foreach (var empType in Enum.GetValues<EmployeeType>())
                {
                    <option value="@empType">@empType</option>
                }
            </select>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <label class="form-label">SalaryPerMonth(&euro)</label>
            <input class="form-control" @bind="@Employee.SalaryPerMonth" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <button class="btn btn-success" @onclick="OnSave">Save Changes</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>
}<button class="btn btn-warning" @onclick="OnBack"> Back </button>
 
@code {
    [Parameter] public int? Id { get; set; }
    EmployeeEditDTO Employee { get; set; }
    TransactionHandler transhandler { get; set; } = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Employee = new();
        }
        else
        {
            Employee = await httpClient.GetFromJsonAsync<EmployeeEditDTO>($"employee/{Id}");
        }
        bool isLoading = false;
    }
    private void OnBack() { navigationManager.NavigateTo("landingpage"); }
    private void OnCancel()
    {
        navigationManager.NavigateTo("employeelist");
    }

    private async Task OnSave()
    {
        HttpResponseMessage? response = null;
        if (Id == null)
        {
            response = await httpClient.PostAsJsonAsync("employee", Employee);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("employee", Employee);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("employeelist");
    }

    private async Task ValidHireDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime hireDate))
        {

            if (!transhandler.HireDateCheck(hireDate))
            {
                try
                {
                    await jsRuntime.InvokeAsync<object>("alert", "Date of Hire can't be later on than today!");
                    Employee.HireDateStart = DateTime.Now;
                }
                catch (HttpRequestException ex)
                {
                    if (ex.StatusCode == HttpStatusCode.BadRequest)
                    {
                        Console.WriteLine($"Error: {ex.Message}"); //works but throws bad request anyway
                    }

                }
            }

        }


    }
    private async Task ValidFiredDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime fireDate))
        {

            if (!transhandler.FiredDateCheck(Employee.HireDateStart, fireDate))
            {
                try
                {
                    await jsRuntime.InvokeAsync<object>("alert", "Date of Hire can't be before today OR the day the employee was hired");
                    Employee.HireDateEnd = null;
                }
                catch (HttpRequestException ex)
                {
                    if (ex.StatusCode == HttpStatusCode.BadRequest)
                    {
                        Console.WriteLine($"Error: {ex.Message}"); //works but throws bad request anyway
                    }
                }
            }
        }

    }
}
