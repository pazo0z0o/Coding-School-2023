@page "/employeelist"
@using FuelStation.Web.Shared.ManagerOnlyDTOs;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Employee List</h3>

@if (isLoading)
{
    <p>Loading ...</p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateItem">Create</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Hire Date Start</th>
                <th>Hire Date End</th>
                <th>Employee Type</th>
                <th>Salary Per Month(&euro)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeeList)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Surname</td>
                    <td>@employee.HireDateStart</td>
                    <td>@employee.HireDateEnd</td>
                    <td>@employee.EmployeeType</td>
                    <td>@employee.SalaryPerMonth</td>
                   
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(employee)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(employee)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeListDTO> employeeList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDTO>>("employee");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("employlist/create");
    }

    private void EditItem(EmployeeListDTO employee)
    {
        navigationManager.NavigateTo($"employeelist/create/{employee.ID}");
    }


    //works
    private async Task DeleteItem(EmployeeListDTO employee)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"employee/{employee.ID}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}