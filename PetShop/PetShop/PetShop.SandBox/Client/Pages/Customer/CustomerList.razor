@page "/customerlist"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@using PetShop.SandBox.Shared;
@using System.Net.Http.Headers;

@if (isLoading)
{
    <div class="spinner-border text-secondary" role="status"></div>
}
else
{
    <h3>Customers</h3>

    <BootstrapButton ButtonType="BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList) {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>
                        <button class="btn btn-warning" @onclick="()=> EditCustomer(customer)">Edit</button>
                        <button class="btn btn-primary" @onclick="()=> DetailItem(customer)">Details</button>
                        <button class="btn btn-Danger" @onclick="()=> DeleteCustomer(customer)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    //TODO:Add checks for valid valus in the DTOs and Forms

}

@code {
    private List<CustomerListDTO> customerList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        customerList = await httpClient.GetFromJsonAsync<List<CustomerListDTO>>("customer"); //looks to the controller for action
    }

    private async Task DeleteCustomer(CustomerListDTO customer)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Deleting Customer.Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");  //looks to the controller for action

            if (!response.IsSuccessStatusCode)
            { await jsRuntime.InvokeVoidAsync("alert", "Deleting Customer Failed. \nDelete his commited Transactions first."); }
            await LoadItemsFromServer();
        }
    }
    // all of them use the Navigation to their specific routes
    private void CreateCustomer()
    {
        navigationManager.NavigateTo("customerList/edit");
    }

    private void EditCustomer(CustomerListDTO customer)
    {
        navigationManager.NavigateTo($"customerlist/edit/{customer.Id}");
    }

    private void DetailItem(CustomerListDTO customer)
    {
        navigationManager.NavigateTo($"customerList/details/{customer.Id}");
    }

}
